#!/usr/bin/env ruby
#
require 'optparse'
require 'date'

require_relative 'lib/db'
require_relative 'lib/archive_updater'
require_relative 'lib/archive_selector'

db_options = {
    host: 'localhost',
    user: 'root',
    password: nil,
    database: 'rg_stat',
    table: 'info'
}

selector_options = {
  from: DateTime.new(1980, 1, 1),
  to: DateTime.now,
  last: nil,
  sort: 'asc'
}

OptionParser.new do |opts|
  opts.banner = 'Gets data from archive. Usage: ./archive [options]'

  opts.on("-h", "--host [#{db_options[:host]}]", "mysql host") do |h|
    db_options[:host] = h
  end

  opts.on("-u", "--user [#{db_options[:user]}]", "mysql username") do |u|
    db_options[:user] = u
  end

  opts.on("-p", "--password [#{db_options[:password]}]", "password") do |p|
    db_options[:password] = p
  end

  opts.on("-d", "--database [#{db_options[:database]}]", "database name") do |d|
    db_options[:database] = d
  end

  opts.on("-t", "--table [#{db_options[:table]}]", "table name") do |t|
    db_options[:table] = t
  end

  opts.on("-f", "--from [#{selector_options[:from].to_formatted_s(:short)}]", "from date") do |f|
    selector_options[:from] = f
  end

  opts.on("--to [#{selector_options[:to].to_formatted_s(:short)}]", "to date") do |t|
    selector_options[:to] = t
  end

  opts.on("-l", "--last [#{selector_options[:last]}]", "tail size") do |t|
    selector_options[:last] = t || 1
  end

  opts.on("-s", "--sort [#{selector_options[:sort]}]", "sort direction") do |s|
    selector_options[:sort] = s
  end
end.parse!

db = Db.new(db_options)

unless STDIN.tty?
  archive_updater = ArchiveUpdater.new(db)

  until STDIN.eof?
    archive_updater.add(ARGF.readline)
  end
end

ArchiveSelector.new(db, selector_options).data.each{ |l| puts l.to_json }

